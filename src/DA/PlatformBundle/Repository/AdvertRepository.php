<?php

namespace DA\PlatformBundle\Repository;
use DateTime;
use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function _findAll()
    {
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    public function _find($id)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id)
        ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function _findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
        ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function _findAuthor()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Décilap')
        ;

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);

        // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function _whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new DateTime(date('Y').'-01-01'))
            ->setParameter('end', new DateTime(date('Y').'-12-31'))
        ;
    }

    public function _getAdvertWhithApplication()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app');

        return $qb
            ->getQuery()
            ->getResult();
    }


    public function _getAdvertWhithCategories(array $categoryNames)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->innerJoin('a.applications', 'c')
            ->addSelect('c');

        $qb->expr()->in('c.name', $categoryNames);
        
        return $qb
            ->getQuery()
            ->getResult();
    }


    public function _getAdvertWhithApplicationAndCategoryAndSkill($id)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->leftJoin('a.advert_skills', 'advs')
            ->addSelect('advs')
            ->leftJoin('advs.skill', 's')
            ->addSelect('s')
            ->andWhere('a.id = :id')
            ->setParameter('id', $id);

        return $qb
            ->getQuery()
            ->getSingleResult();
    }
}
